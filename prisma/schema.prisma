generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId      String
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  phoneNumbers PhoneNumber[]
  addresses    Address[]
  categories   Category[]
  reviews      Review[]
  products     Product[]
}

model Address {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurantId String
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  phoneNumber  PhoneNumber?
}

model PhoneNumber {
  id        String   @id @default(cuid())
  number    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId String?
  customer   User?   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  addressId String?  @unique
  address   Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  restaurants Restaurant[]
}

model Product {
  id           String   @id @default(cuid())
  name         String
  description  String
  slug         String   @unique
  price        Float
  imageUrl     String?
  restaurantId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  reviews    Review[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  restaurants  Restaurant[]
  reviews      Review[]
  phoneNumbers PhoneNumber[]
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId String
  customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([restaurantId])
}
